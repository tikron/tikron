
Allgemein:

- Images über attachment Tabelle referenzieren.
- Images wirklich in Verzeichnis je Bereich/Kategorie speichern (Problem Verschieben zwischen Kategorien)?
- Service-Layer in separates Projekt auslagern und von webapp/webman gemeinsam nutzen.
- Anpassungen bzgl. Tomcat 8.5 (https://jaxenter.de/apache-tomcat-8-5-56699)  


Persistence:

- Statt Album- und Picture Bilder getrennt zu speichern, diese in Attachment zusammenführen und darauf referenzieren.
- CleanUp zum Löschen nicht mehr referenzierte Bilder (Attachments) bauen.
- @ManyToOne mit Fetch.LAZY versehen? Führt ansonsten zu großen SQL-Statements z.B. bei getComments().size()
- Annotaionen @Index hinzufügen?
- Statt visible im DAO zu filtern, dies im Service Layer per Java 8 Collection:removeIf().
- Tabellen Comment und Picture... über Relationstabelle referenzieren.
- Zum Laden des Menüs Projections (DTOs) verwenden. http://blog.arnoldgalovics.com/2017/03/14/using-projections-in-your-data-access-layer/ -> Geht nicht wegen OneToMany Catalog:Category.


Tikron Manager:

- BaseBean sollte Serializable implementieren.
- Würde gerne von JSF auf AngualarJS umstellen.


Tikron WebApp:

- Für Pager statt komplette EntityBeans kleine POJOs verwenden, die per JPQL-Konstruktor erstellt werden ("Java Persistence 2", Seite 202)
- buildCanonicalUrl() Objektorientiert realisieren.
- Videos mit "Video for everybody" (http://camendesign.com/code/video_for_everybody) anzeigen.
- Bilder lazy laden und Abmessungen entsprechend view port wählen.
- Bilder mit CSS max-width/max-height formattieren.
- Alternative AntiSamy suchen.
- Evtl. Google ReCaptcha verwenden (springinpractice.com/2008/03/13/how-to-recaptcha-your-java-application)
